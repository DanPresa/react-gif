{"version":3,"sources":["components/AddCategory.js","helper/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","alt","src","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAqCeA,MAlCf,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACAC,mBAAS,IADT,mBAC7BC,EAD6B,KACjBC,EADiB,KAmBpC,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEIJ,IAINF,GAAc,SAACO,GAAD,OAAWL,GAAX,mBAA0BK,OACxCJ,EAAc,OAKV,2BACIK,KAAK,OACLC,MAAQP,EACRQ,SArBc,SAAEL,GAExBF,EAAcE,EAAEM,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCYLO,EAVK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE1B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAML,EAAQM,IAAMhB,IACzB,2BAAG,2BAAKU,MCoBLO,EArBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAAEA,GAAe,IAAD,EACdZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WAENxB,EAAQC,GAAUwB,MAAK,SAACC,GACpBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAACpB,IAEGqB,EDb2BK,CAAc1B,GAAlCa,EADgB,EACtBN,KAAca,EADQ,EACRA,QAEtB,OACI,oCACI,4BAAMpB,GACJoB,GAAW,cACb,yBAAKJ,UAAU,aAEPH,EAAOJ,KAAI,SAACkB,GAAD,OACP,kBAAC,EAAD,eACIC,IAAMD,EAAMhB,IACPgB,UEWlBE,EAzBM,WACjB,IADuB,EAGazC,mBAFd,CAAC,cADA,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAKvB,OACI,kBAAC,WAAD,KACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI2C,EAAWrB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CACI4B,IAAM5B,EACNA,SAAWA,UCdnC+B,IAASC,OAAQ,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.1d1c5531.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropsTypes from 'prop-types';\r\n\r\nfunction AddCategory({ setCategories }) {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( !inputValue ) {\r\n            return;\r\n        }\r\n\r\n        setCategories((cats) => [inputValue, ...cats]);\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropsTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=uRzX2YWzPXIss3l5KOcWZH0c65410ftJ`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img alt={ title } src={ url } />\r\n            <p><b>{ title }</b></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\n\r\nimport { useFetchGifs } from './../hooks/useFetchGifs';\r\n\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && 'Cargando...' }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((image) => (\r\n                        <GifGridItem\r\n                            key={ image.id }\r\n                            { ...image }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from './../helper/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { Fragment, useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const categoriesArr = ['One Punch'];\r\n\r\n    const [categories, setCategories] = useState(categoriesArr);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ul>\r\n            {\r\n                categories.map((category) => (\r\n                    <GifGrid\r\n                        key={ category }\r\n                        category={ category }\r\n                    />\r\n                ))\r\n            }\r\n            </ul>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n\n"],"sourceRoot":""}